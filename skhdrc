# linux keyboard has hyper, not fn
# mac keyboard has fn, not hyper

# inside [], the following means
# *          : command    key is bound in all apps
# "terminal" ~            key is unbound in terminal
cmd + shift - return [
  "emacs" : osascript ~/bin/chrome-new-tab.applescript
  "google chrome" : osascript ~/bin/chrome-new-tab.applescript
  "slack" : osascript ~/bin/chrome-new-tab.applescript
  "iterm2" : osascript ~/bin/chrome-new-tab.applescript
  "finder" : osascript ~/bin/chrome-new-tab.applescript
  "intellij idea" : ~
]

cmd + shift + alt - return : open -na Google\ Chrome --args --profile-directory=Profile\ 1 "chrome://newtab" # --new-window

cmd + alt + ctrl - e : emacsclient --socket-name torgemacs --eval "(emacs-everywhere)"

cmd - return [
  # "emacs" : # dont catch this, s-return is bound in emacs
  "slack" : emacsclient --socket-name torgemacs --eval '(let ((default-directory (t/read-file "~/.cur"))) (+vterm/here t))'; osascript -e 'tell application "Emacs" to activate';
  "google chrome" : emacsclient --socket-name torgemacs --eval '(let ((default-directory (t/read-file "~/.cur"))) (+vterm/here t))'; osascript -e 'tell application "Emacs" to activate';
  "finder" : folder=$(osascript -e 'tell application "Finder" to return (POSIX path of (folder of the front window as alias))') ; emacsclient --socket-name torgemacs --eval "(let ((default-directory \"$folder\")) (+vterm/here t))" ;  osascript -e 'tell application "Emacs" to activate';
  "zoom.us" : emacsclient --socket-name torgemacs --eval '(let ((default-directory (t/read-file "~/.cur"))) (+vterm/here t))'; osascript -e 'tell application "Emacs" to activate';
  "intellij idea" : emacsclient --socket-name torgemacs --eval '(let ((default-directory (t/read-file "~/.cur"))) (+vterm/here t))'; osascript -e 'tell application "Emacs" to activate';
  "iterm2" : osascript ~/bin/iterm-new-tab.applescript
]

cmd + shift - h : open -a Finder -- ~/

fn - i : open -a IntelliJ
fn - d : open -a Dash
fn - n : open -a Finder
fn - e : open -a Emacs
fn - o : open -a 'Microsoft Outlook'
fn - z : open -a Zoom.us

hyper - i : open -a IntelliJ
hyper - d : open -a Dash
hyper - n : open -a Finder
hyper - e : open -a Emacs
hyper - o : open -a 'Microsoft Outlook'
hyper - z : open -a Zoom.us

# reload keybindings
hyper - q : cd && skhd -r
fn - q: cd && skhd -r

# move window focus
alt - h : yabai -m window --focus west  || yabai -m display --focus west
alt - l : yabai -m window --focus east  || yabai -m display --focus east
alt - k : yabai -m window --focus north || yabai -m display --focus north
alt - j : yabai -m window --focus south || yabai -m display --focus south

# swap location with window in direction
alt + shift - h : yabai -m window --warp west  || $(WIN_ID=$(yabai -m query --windows --window | jq '.id') && yabai -m window --display west && yabai -m window --focus $WIN_ID);
alt + shift - l : yabai -m window --warp east || $(WIN_ID=$(yabai -m query --windows --window | jq '.id') && yabai -m window --display east && yabai -m window --focus $WIN_ID);
alt + shift - k : yabai -m window --warp north || $(WIN_ID=$(yabai -m query --windows --window | jq '.id') && yabai -m window --display north && yabai -m window --focus $WIN_ID);
alt + shift - j : yabai -m window --warp south || $(WIN_ID=$(yabai -m query --windows --window | jq '.id') && yabai -m window --display south && yabai -m window --focus $WIN_ID);

fn - 0 : yabai -m space --balance
fn - r : yabai -m space --rotate 90

# float and center on screen
# alt + shift - f : yabai -m window --toggle float;\
#                   yabai -m window --grid 11:11:3:1:6:8
hyper - c : yabai -m window --toggle float;\
            yabai -m window --grid 11:11:3:1:6:8
fn - c : yabai -m window --toggle float;\
         yabai -m window --grid 11:11:1:1:9:9

# float and column in center of screen
hyper - u : yabai -m window --toggle float;\
            yabai -m window --grid 11:11:2:0:7:11
fn - u : yabai -m window --toggle float;\
         yabai -m window --grid 11:11:2:0:7:11

# fullscreen
hyper - f : yabai -m window --toggle zoom-fullscreen
fn - f : yabai -m window --toggle zoom-fullscreen

# toggle fill parent column
hyper - p : yabai -m window --toggle zoom-parent
fn - p : yabai -m window --toggle zoom-parent

# change split direction
alt - s : yabai -m window --toggle split
# alt - g : yabai -m window --insert east
alt - v : yabai -m window --insert south
fn - s : yabai -m window --toggle split
fn - g : yabai -m window --insert east
fn - v : yabai -m window --insert south

# mirror window tree
# alt y steals paste from kill ring emacs
#alt - y : yabai -m space --mirror y-axis
# alt x is m-x in emacs
alt - u : yabai -m space --mirror x-axis
fn - y : yabai -m space --mirror y-axis
fn - x : yabai -m space --mirror x-axis

# turn of border when returning to default
:: default : yabai -m window --toggle border

# gap mode
:: gap @ : yabai -m window --toggle border
hyper - g ; gap
fn - g ; gap
gap < z :     yabai -m space --padding abs:0:0:0:0;\
              yabai -m space --gap abs:0
gap < s :     yabai -m space --padding abs:10:10:10:10;\
              yabai -m space --gap abs:10
gap < m :     yabai -m space --padding abs:20:20:20:20;\
              yabai -m space --gap abs:20
gap < l :     yabai -m space --padding abs:50:50:50:50;\
              yabai -m space --gap abs:50
gap < h :     yabai -m space --padding abs:100:100:100:100;\
              yabai -m space --gap abs:100
gap < 0x1B :  yabai -m space --gap rel:20;\
              yabai -m space --padding rel:+20:+20:+20:+20
gap < 0x2C :  yabai -m space --gap rel:-20;\
              yabai -m space --padding rel:-20:-20:-20:-20
gap < escape ; default
gap < return ; default

# resize windows
ctrl + cmd - right : yabai -m window --resize right:50:0
ctrl + cmd - left :  yabai -m window --resize right:-50:0
ctrl + cmd - up :    yabai -m window --resize bottom:0:-50
ctrl + cmd - down :  yabai -m window --resize bottom:0:50

# move windows
ctrl + shift + cmd - right : yabai -m window --move rel:+50:0
ctrl + shift + cmd - left :  yabai -m window --move rel:-50:0
ctrl + shift + cmd - up :    yabai -m window --move rel:0:-50
ctrl + shift + cmd - down  : yabai -m window --move rel:0:50

# center single window
ctrl + alt + cmd - c: yabai -m window --grid 7:7:2:1:3:4

# fullscreen single window
ctrl + alt + cmd - f: yabai -m window --grid 1:1:1:1:1:1

# move to other display, cycles monitors
ctrl + alt + cmd - d: WIN_ID=$(yabai -m query --windows --window | jq '.id') && (yabai -m window --display next || yabai -m window --display first) && yabai -m window --focus $WIN_ID
ctrl + alt + cmd - p: WIN_ID=$(yabai -m query --windows --window | jq '.id') && (yabai -m window --display next || yabai -m window --display first) && yabai -m window --focus $WIN_ID

# move windows to screen corners
ctrl + alt + cmd - i : yabai -m window --grid 8:8:0:0:4:4
ctrl + alt + cmd - l : yabai -m window --grid 8:8:4:4:4:4
ctrl + alt + cmd - k : yabai -m window --grid 8:8:0:4:4:4
ctrl + alt + cmd - o : yabai -m window --grid 8:8:4:0:4:4

# move windows to screen edges
ctrl + alt + cmd - up :    yabai -m window --grid 2:2:0:0:2:1
ctrl + alt + cmd - down :  yabai -m window --grid 1:1:0:0:0:0
ctrl + alt + cmd - left :  yabai -m window --grid 1:2:0:0:1:1
ctrl + alt + cmd - right : yabai -m window --grid 1:2:1:0:1:1

# move windows to screen outer left and right
shift + ctrl + alt + cmd - h : yabai -m window --grid 12:12:0:0:3:12
shift + ctrl + alt + cmd - l : yabai -m window --grid 12:12:9:0:3:12

# move windows across spaces without the scripting addition
alt - 1: skhd -k "shift + ctrl - 1" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 18 using option down'
alt - 2: skhd -k "shift + ctrl - 2" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 19 using option down'
alt - 3: skhd -k "shift + ctrl - 3" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 20 using option down'
alt - 4: skhd -k "shift + ctrl - 4" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 21 using option down'
alt + shift - 1: yabai -m window --space 1; skhd -k "shift + ctrl - 1" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 18 using option down'
alt + shift - 2: yabai -m window --space 2; skhd -k "shift + ctrl - 2" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 19 using option down'
alt + shift - 3: yabai -m window --space 3; skhd -k "shift + ctrl - 3" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 20 using option down'
alt + shift - 4: yabai -m window --space 4; skhd -k "shift + ctrl - 4" # sleep 0.1 && osascript -e 'tell application "System Events" to key code 21 using option down'

# kanbanize url
#
shift + ctrl + alt + cmd - k: osascript -l JavaScript -e '[].slice.call(((app) => (app && app.windows && app.windows[0] && app.windows[0].tabs) || [])(Application("Google Chrome"))).map((t) => t.url()).filter((url) => url.includes("kanbanize")).map((url) => new RegExp("([0-9]{4,})").exec(url)).filter((matches) => matches != null).map(([kbid]) => `KB-${kbid}`).join(" ").replace(/\r\n/g, "")' | pbcopy && osascript -e 'tell application "System Events" to keystroke "v" using command down';
