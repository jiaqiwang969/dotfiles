#!/bin/bash

# external functions
source "$HOME/dotfiles/fns/tab.bash"

function docker-remove-all-untagged-images {
  docker rmi $(docker images | grep "^<none>" | awk '{print $3}')
}

function chrome () {
  /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome $* 2>&1 &
}

# week-number
function week-number {
  if [ -z "$1" ]
  then
    date +%V
  else
    date -d $1 +%V
  fi
}

#[[ $SHELL = "/bin/bash" ]] && echo is bash
#[[ $SHELL = "/bin/zsh" ]] && echo is zsh

# ssh autocomplete
[[ $SHELL = "/bin/bash" ]] && complete -W "$(echo $(cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | sort -u | grep -v "\["))" ssh

# git autocomplete
[[ $SHELL = "/bin/bash" ]] && source /usr/local/etc/bash_completion.d/git-completion.bash
source /usr/local/etc/bash_completion.d/git-prompt.sh

function __git_prompt {
  GIT_PS1_SHOWDIRTYSTATE=1
  __git_ps1 " %s" | sed 's/ \([+*]\{1,\}\)$/\1/'
}

# clone github repo url and open project in macvim
function cloneopen_github_repo {
  URL=$1
  DATE=`date`
  mkdir -p ~/Code/github/
  cd ~/Code/github/
  REPO=`echo $URL | awk '{ split($0, url, "/"); print url[4] "-" url[5] }'`
  FOLDER=`echo "$REPO-$DATE" | sed -E "s/[ :]/-/g"`
  git clone $URL".git" $FOLDER
  mvim $FOLDER
}

function bell {
  echo -ne '\007'
}

function git-ignore-file-in-local-index() {
  git update-index --assume-unchanged "$@"
}

function git-find-commit-with-text() {
  git log -S $1 --source --all --reverse
}

# copy with progress
cp_p () {
  pv < $1 > $2;
}

# mkdir and cd
function md () {
  mkdir -p "$@" && cd "$@"
}

# find shorthand
function f () {
  find . -name "$1"
}

# pretty print json
# function json () {
#   if [ -p /dev/stdin ]; then # piping
#     json
#   else
#     json "$*"
#   fi
# }

# export repo without .git
function gitexport () {
  mkdir -p "$1"
  git archive master | tar -x -C "$1"
}

# gzipped size
function gz () {
  ORIG=`cat "$1" | wc -c | sed -E "s/ //g"`
  GZIP=`gzip -c "$1" | wc -c | sed -E "s/ //g"`
  echo "$ORIG => $GZIP"
}

# escape utf-8 char into 3-byte format
function escape () {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# decode \x{ABCD} unicode escape sequences
function unidecode () {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}

# extract archives
function extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) rar x $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# marks - jump around folders
function jump {
  cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}

function mark {
  mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}

function unmark {
  rm -i "$MARKPATH/$1"
}

function marks {
  \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}

function isup {
  nc -zG 3 -L 2 $1 $2 &> /dev/null && echo "$1:$2 up"
}

# autocomplete marks
_completemarks() {
  local curw=${COMP_WORDS[COMP_CWORD]}
  local wordlist=$(gfind $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
  return 0
}

#complete -F _completemarks jump unmark

# serve as web root
function serve {
  open http://localhost:3000/ &
  http-server . -p 3000
}

function prompt {
  q="- $(date +%T)"; while [[ ${#q} -lt $COLUMNS ]]; do q="${q:0:1}$q"; done; echo -e "\033[0;90m$q"
}

whatsmyip () {
  curl --silent http://canihazip.com/s/
  echo
}

function cd () {
  builtin cd "$@";
  ls -l;
}

function git-root () {
  git rev-parse --show-toplevel
}

function share () {
  scp $1 wa.gd:~/public/
}

function share-vid-as-gif () {
  gifify $1 --good
  share $1".gif"
  echo "public.wa.gd/$1.gif" | pbcopy
}

# Change working directory to the top-most Finder window location
function cdf () {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# unmarks and marks the current directory
function mark-cur {
  yes | unmark cur
  mark cur
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# take a photo, use this to find the interface
# ffmpeg -f avfoundation -list_devices true -i ""
function take-photo {
  ffmpeg -ss 0.5 -r 10 -f avfoundation -i 0 -frames:v 1 -s 1280x720 ~/Desktop/capture.jpg
}